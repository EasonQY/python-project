'''
范式：终极目标是为了减少数据的冗余，凡是通过关系寻找出来的数据，坚决不再重复存储
第一范式：在设计表存储数据时，数据具有原子性（不可拆分）
第二范式：解决表设计出现的部分以来，部分依赖就是存在字段依赖主键中某个字段（主键部分）。只要不存在复合主键(依赖关系)，就满足2NF
第三范式：理论上讲，应该一张表中的所有字段都直接依赖主键。
综上，实体单独建表

'''


'''
打开：sudo /usr/local/mysql/support-files/mysql.server start
关闭：sudo /usr/local/mysql/support-files/mysql.server stop
重启：sudo /usr/local/mysql/support-files/mysql.server restart

mysql --exit,quit,\q
command + shift + G
cd /usr/local/mysql
mysql -u root -p
set password for root@localhost = password('quyi0816')
命令行后 +\g

查看用户名 select user()\g

跳跃权限表：The MySQL server is running with the –skip-grant-tables option so it cannot execute this statement
mysql> flush privileges

create database TESTDB\g --show databases\g
alter databases Hdatabase
进入数据库  use TESTDB  -- show tables

创建表：
create table EMPLOYEE(
name varchar(10),
gender varchar(10),

)charset utf8

show tables
查看表结构信息 describe EMPOLEE
'''
# import MySQLdb
# # 打开数据库连接
# db = MySQLdb.connect('localhost','root','quyi0816','TESTDB',charset = 'utf8')

# # 使用cursor()方法获取操作游标
# cursor = db.cursor()

# # 使用execute方法执行SQL语句
# cursor.execute('SELECT VERSION()')

# # 使用 fetchone()方法获取一条数据
# data = cursor.fetchone()

# print('Database version : %s' %data)

# # 关闭数据库
# db.close()


# 创建数据表
# 修改表名 alter table EMPLOYEE rename EMPLOTEE1
import MySQLdb
# 打开数据库连接
db = MySQLdb.connect('localhost','root','quyi0816','TESTDB',charset = 'utf8')

# 使用cursor()方法获取操作游标
cursor = db.cursor()

# 如果数据表已经存在，使用execute()方法删除表
cursor.execute('Drop TABLE IF EXISTS EMPLOYEE')

# 创建数据表SQL语句
sql = """ CREATE TABLE EMPLOYEE(
            # sno int primary key(id)
			FIRST_NAME CHAR(20) NOT NULL,
			LAST_NAME CHAR(20),
			AGE INT,
			SEX CHAR(1),
			INCOME FLOAT)"""

cursor.execute(sql)

# SQL 插入语句
# select * from EMPILTEE 
sql1 = """INSERT INTO EMPLOYEE(FIRST_NAME,
			LAST_NAME,AGE,SEX,INCOME)
			VALUES('Mac','Mohan',20,'M',2000),
			('Yi','Qu',19,'M',5000)
		"""
try:
	# 执行sql语句
	cursor.execute(sql1)
	# 提交到数据库执行
	db.commit()
except:
	# Rollback in case there is any error
	db.rollback()

# 添加,放在第一个字段位置
# alter table EMPLOYEE add id int first

# 修改 number字段为固定长度，放在第二个位置
# alter table EMPLOYEE modify number char(10) after id
# 修改gender为sex
# alter table EMPLOYEE change gende sex varchar(10)
# 删除表中的字段
# alter table EMPLOYEE drop age


# 数据库查询操作
sql2 = "SELECT * FROM EMPLOYEE \
		WHERE INCOME > '%d' " %(1000)
		# WHERE id in(1,3,5)
        # group by 统计功能
		# select sex,count(*),max(height),min(height),avg(age),sum(age) from EMPLOTEE group by sex;

try:
	cursor.execute(sql2)
#获取所有记录列表
	results = cursor.fetchall()
	for row in results:
		fname = row[0]
		lname = row[1]
		age = row[2]
		sex = row[3]
		income = row[4]

		print('fname = {},lname = {}, age ={},sex ={},income ={}'.format(str(fname),str(lname),age,str(sex),income))

except:
	print('Error:unable to fetch data')


# 数据库更新
sql3 = "UPDATE EMPLOYEE SET AGE = AGE + 1 WHERE SEX = '%c'" %('M')

try:
	cursor.execute(sql3)
	db.commit()

except:
	db.rollback()

# 删除操作
sql4 = "DELETE FROM EMPLOYEE WHERE AGE >'%d'" %(20)
try:
	cursor.execute(sql4)
	db.commit()

except:
	db.rollback()
db.close()

















